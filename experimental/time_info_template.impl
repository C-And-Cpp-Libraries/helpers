#ifndef _TIME_INFO_TEMPLETE_IMPL_
#define _TIME_INFO_TEMPLETE_IMPL_

#include "time_info.h"

namespace time_info
{

namespace details
{

inline constexpr time_type microsec_to_nsec( time_type count )noexcept{ return count * ratio::micro_ratio_ns; }
inline constexpr time_type sec_to_nsec( time_type count )noexcept{ return count * ratio::ns_ratio_sec; }
inline constexpr time_type nsec_to_sec( time_type count )noexcept{ return count / ratio::ns_ratio_sec; }
inline constexpr time_type nsec_to_microsec( time_type count )noexcept{ return count / ratio::micro_ratio_ns; }

template< time_type tick_cnt, time_type period >
constexpr time_type ratio() noexcept
{
    return ratio::ns_ratio_sec * period / tick_cnt;
}

template< time_type tick_cnt, time_type period >
constexpr time_type ratio_count( const time_moment& m ) noexcept
{
    return m.sec() * tick_cnt / period + ( ( tick_cnt > 1 )? (m.nsec() / ( ratio::ns_ratio_sec / tick_cnt ) ) : 0 );
}

// ctors
template< time_type tick_cnt, time_type period >
constexpr time_info< tick_cnt, period >::time_info() : 
    time_info_base( time_info_base::access{} ){}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >::time_info( time_type count ) noexcept : 
    time_info_base( time_info_base::access{} ),
    m_time( details::nsec_to_sec( ratio< tick_cnt, period >() ) * count, 0 ),
    m_count( count ){}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >::time_info( const date_time& dt ) noexcept : 
    time_info_base( time_info_base::access{} ),
    m_time( dt.to_time_moment() ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >::time_info( const time_moment& tm ) noexcept : 
    time_info_base( time_info_base::access{} ),
    m_time( tm ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >::time_info( const timeval& tv ) noexcept : 
    time_info_base( time_info_base::access{} )
{
    from_timeval( tv );
}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >::time_info( const timespec& ts ) noexcept : 
    time_info_base( time_info_base::access{} )
{
    from_timespec( ts );
}

template< time_type tick_cnt, time_type period >
template< typename std_duration_type, typename >
time_info< tick_cnt, period >::time_info( const std_duration_type& d ) noexcept : 
    time_info_base( time_info_base::access{} ),
{
    from_std_duration( d );
}

template< time_type tick_cnt, time_type period >
template< time_type other_num, time_type other_denum >
time_info< tick_cnt, period >::time_info( const time_info< other_num, other_denum >& other ) noexcept : 
    time_info_base( time_info_base::access{} ),
    m_time( other.m_time ),
    m_count( ratio_count< tick_cnt, period >( other.m_time ) ){}

template< time_type tick_cnt, time_type period >
template< time_type other_num, time_type other_denum >
time_info< tick_cnt, period >::time_info( time_info< other_num, other_denum >&& other ) noexcept :
    time_info_base( time_info_base::access{} ),
    m_time( std::move( other.m_time ) ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

// assignment
template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator=( time_type count ) noexcept
{
    m_time.set( details::nsec_to_sec( ratio< tick_cnt, period >() ) * count, 0 );
    m_count = count;
    return *this;
}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator=( const time_moment& tm ) noexcept
{
    m_time = tm;
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator=( const date_time& dt ) noexcept
{
    m_time = dt.to_time_moment();
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

template< time_type tick_cnt, time_type period >
template< time_type other_num, time_type other_denum >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator=( const time_info< other_num, other_denum >& other ) noexcept
{
    m_time = other.m_time;
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

template< time_type tick_cnt, time_type period >
template< time_type other_num, time_type other_denum >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator=( time_info< other_num, other_denum >&& other ) noexcept
{
    m_time = std::move( other.m_time );
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

// conversions
template< time_type tick_cnt, time_type period >
void time_info< tick_cnt, period >::from_time_t( time_t time ) noexcept
{
    m_time.set( time, 0 );
    m_count = ratio_count< tick_cnt, period >( m_time );
}

template< time_type tick_cnt, time_type period >
void time_info< tick_cnt, period >::from_timeval( const timeval& time )
{
    m_time.set( time.tv_sec, details::microsec_to_nsec( time.tv_usec ) );
    m_count = ratio_count< tick_cnt, period >( m_time );
}

template< time_type tick_cnt, time_type period >
void time_info< tick_cnt, period >::from_timespec( const timespec& time )
{
    m_time.set( time.tv_sec, time.tv_nsec );
    m_count = ratio_count< tick_cnt, period >( m_time );
}

template< time_type tick_cnt, time_type period >
template< typename std_duration_type, typename >
void time_info< tick_cnt, period >::from_std_duration( const std_duration_type& d )
{
    using namespace std::chrono;

    m_time.set_sec( duration_cast< seconds >( d ).count() );
    m_time.set_nsec( duration_cast< nanoseconds >( d ).count() -
                     duration_cast< nanoseconds >( seconds{ m_time.sec() } ).count() );

    m_count = ratio_count< tick_cnt, period >( m_time );
}

template< time_type tick_cnt, time_type period >
void time_info< tick_cnt, period >::from_nsec_since_epoch()
{
    from_std_duration( std::chrono::system_clock::now().time_since_epoch() );
}

template< time_type tick_cnt, time_type period >
time_t time_info< tick_cnt, period >::to_time_t() const noexcept
{
    return m_time.sec();
}

template< time_type tick_cnt, time_type period >
timeval time_info< tick_cnt, period >::to_timeval() const noexcept
{
    return { ( long )m_time.sec(), ( long )details::nsec_to_microsec( m_time.nsec() ) };
}

template< time_type tick_cnt, time_type period >
timespec time_info< tick_cnt, period >::to_timespec() const noexcept
{
    return { ( long )m_time.sec(), ( long )m_time.nsec() };
}

template< time_type tick_cnt, time_type period >
template< typename std_duration_type, typename >
std_duration_type time_info< tick_cnt, period >::to_std_duration() const noexcept
{
    using namespace std::chrono;
    return duration_cast< std_duration_type >( seconds{ m_time.sec() } ) +
           duration_cast< std_duration_type >( nanoseconds{ m_time.nsec() } );
}

template< time_type tick_cnt, time_type period >
time_type time_info< tick_cnt, period >::count() const noexcept
{
    return m_count;	
}

template< time_type tick_cnt, time_type period >
time_moment time_info< tick_cnt, period >::to_time_moment() const noexcept
{ 
    return m_time; 
}

template< time_type tick_cnt, time_type period >
date_time time_info< tick_cnt, period >::to_date_time() const noexcept
{ 
    return m_time.to_date_time(); 
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
bool time_info< tick_cnt, period >::operator==( const time_info< other_tick_cnt, other_period >& other ) const noexcept
{ 
    return other.m_time == m_time;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
bool time_info< tick_cnt, period >::operator!=( const time_info< other_tick_cnt, other_period >& other ) const noexcept
{ 
    return other.m_time != m_time;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator+=( const time_info< other_tick_cnt, other_period >& other ) noexcept
{ 
    m_time += other.m_time;
	return *this;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator-=( const time_info< other_tick_cnt, other_period >& other ) noexcept
{ 
    m_time -= other.m_time;
	return *this;
}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator+=( time_type count ) noexcept
{ 
    m_time += time_moment{ count * ratio< tick_cnt, period >() }; 
	return *this;
}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period >& time_info< tick_cnt, period >::operator-=( time_type count ) noexcept
{ 
    m_time -= time_moment{ count * ratio< tick_cnt, period >() }; 
	return *this;
}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period > operator+( const time_info< tick_cnt, period >& l, const time_info< tick_cnt, period >& r ) noexcept
{
    time_info< tick_cnt, period > ti{ l };
	return ti.operator+=( r );
}

template< time_type tick_cnt, time_type period >
time_info< tick_cnt, period > operator-(const time_info< tick_cnt, period >& l, const time_info< tick_cnt, period >& r) noexcept
{
    time_info< tick_cnt, period > ti{ l };
	return ti.operator-=( r );
}

}// details

}// time_info

#endif
