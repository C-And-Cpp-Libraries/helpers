#ifndef _HELPERS_TIME_RATIO_TEMPLETE_IMPL_
#define _HELPERS_TIME_RATIO_TEMPLETE_IMPL_

#include "time_ratio.h"
#include <utility>

namespace helpers
{

namespace temporal
{

namespace details
{

static constexpr time_type micro_ratio_ns{ 1000 };
constexpr time_type microsec_to_nsec( time_type count )noexcept{ return count * micro_ratio_ns; }
constexpr time_type sec_to_nsec( time_type count )noexcept{ return count * ratio::ns_ratio_sec; }
constexpr time_type nsec_to_sec( time_type count )noexcept{ return count / ratio::ns_ratio_sec; }
constexpr time_type nsec_to_microsec( time_type count )noexcept{ return count / micro_ratio_ns; }

// Aux : Calc nsec from seconds and count depending on tick count and period
template< time_type tick_cnt, time_type period >
constexpr time_type nsec_from_count( time_type count, time_type sec ) noexcept
{
    return ( !( period / tick_cnt ) ) ?
           ( ( count - ( sec * tick_cnt ) / period ) * period * ratio::ns_ratio_sec ) / tick_cnt : 0;
}

// Calc time_moment from count of units depending on tick count and period
template< time_type tick_cnt, time_type period >
constexpr time_moment cnt_to_time_moment( time_type count ) noexcept
{
    return { ( count * period ) / tick_cnt, // sec
             nsec_from_count< tick_cnt, period >( count, ( count * period ) / tick_cnt ) };
}

// Calc std::durtion from start point( julian day 0 or epoch year )
template< typename std_duration_type >
constexpr time_moment dur_to_time_moment( const std_duration_type& d, const since& start_point ) noexcept
{
    using namespace std::chrono;
    return { duration_cast< seconds >( d ).count() +
             ( ( start_point == since::epoch )? details::julian_sec_before_epoch : 0 ),
             duration_cast< nanoseconds >( d ).count() % ratio::ns_ratio_sec };
}

// Calculate number of units depending on tick count and period
template< time_type tick_cnt, time_type period >
constexpr time_type ratio_count( const time_moment& m, bool epoch = false ) noexcept
{
    return ( epoch? m.sec_epoch() : m.jsec() ) * tick_cnt / period +
            ( ( tick_cnt > 1 )? ( ( epoch? m.nsec_epoch() : m.nsec() ) / ( ratio::ns_ratio_sec / tick_cnt ) ) : 0 );
}

// ctor from number of units( seconds, msec etc )
template< time_type tick_cnt, time_type period >
constexpr time_ratio< tick_cnt, period >::time_ratio( time_type count ) noexcept :
    m_time( cnt_to_time_moment< tick_cnt, period >( count ) ),
    m_count( count ){}

// ctor from time_moment
template< time_type tick_cnt, time_type period >
constexpr time_ratio< tick_cnt, period >::time_ratio( const time_moment& tm ) noexcept :
    m_time( tm ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

// ctor from date_time
template< time_type tick_cnt, time_type period >
constexpr time_ratio< tick_cnt, period >::time_ratio( const date_time& dt ) noexcept :
    m_time( dt.get_time_moment() ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

// ctor from timeval
template< time_type tick_cnt, time_type period >
constexpr time_ratio< tick_cnt, period >::time_ratio( const timeval& tv ) noexcept :
    m_time( tv.tv_sec + julian_sec_before_epoch, microsec_to_nsec( tv.tv_usec ) ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

// ctor from timespec
template< time_type tick_cnt, time_type period >
constexpr time_ratio< tick_cnt, period >::time_ratio( const timespec& ts ) noexcept :
    m_time( ts.tv_sec + julian_sec_before_epoch, ts.tv_nsec ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

// ctor from std::chrono::duration( aka std::chrono::seconds etc )
template< time_type tick_cnt, time_type period >
template< typename std_duration_type >
constexpr time_ratio< tick_cnt, period >::time_ratio( const std_duration_type& d,const since& start_point ) noexcept :
    m_time( dur_to_time_moment( d, start_point ) ),
    m_count( ratio_count< tick_cnt, period >( m_time ) )
{
    static_assert( type_traits::is_duration< std_duration_type >::value, "Invalid duration type" );
}

// conversion ctors from other time_ratio with possibly different tick_count and period
template< time_type tick_cnt, time_type period >
template< time_type other_num, time_type other_denum >
constexpr time_ratio< tick_cnt, period >::time_ratio( const time_ratio< other_num, other_denum >& other ) noexcept :
    m_time( other.m_time ),
    m_count( ratio_count< tick_cnt, period >( other.m_time ) ){}

template< time_type tick_cnt, time_type period >
template< time_type other_num, time_type other_denum >
constexpr time_ratio< tick_cnt, period >::time_ratio( time_ratio< other_num, other_denum >&& other ) noexcept :
    m_time( std::move( other.m_time ) ),
    m_count( ratio_count< tick_cnt, period >( m_time ) ){}

// assignment from number of units
template< time_type tick_cnt, time_type period >
time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::operator=( time_type count ) noexcept
{
    m_time = cnt_to_time_moment< tick_cnt, period >( count );
    m_count = count;
    return *this;
}

// assignment from time_moment
template< time_type tick_cnt, time_type period >
time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::operator=( const time_moment& tm ) noexcept
{
    m_time = tm;
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

// assignment from date_time
template< time_type tick_cnt, time_type period >
time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::operator=( const date_time& dt ) noexcept
{
    m_time = dt.get_time_moment();
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

// assignment from other time_ratio with possibly different tick_count and period
template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::operator=( const time_ratio< other_tick_cnt, other_period >& other ) noexcept
{
    m_time = other.m_time;
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::operator=( time_ratio< other_tick_cnt, other_period >&& other ) noexcept
{
    m_time = std::move( other.m_time );
    m_count = ratio_count< tick_cnt, period >( m_time );
    return *this;
}

// conversion from time_t
template< time_type tick_cnt, time_type period >
void time_ratio< tick_cnt, period >::from_time_t( time_t time ) noexcept
{
    m_time.set_nsec( 0 );
    m_time.set_sec_epoch( time );
    m_count = ratio_count< tick_cnt, period >( m_time );
}

// conversion from timeval
template< time_type tick_cnt, time_type period >
void time_ratio< tick_cnt, period >::from_timeval( const timeval& time ) noexcept
{
    m_time.set_sec_epoch( time.tv_sec );
    m_time.set_nsec( details::microsec_to_nsec( time.tv_usec ) );
    m_count = ratio_count< tick_cnt, period >( m_time );
}

// conversion from timespec
template< time_type tick_cnt, time_type period >
void time_ratio< tick_cnt, period >::from_timespec( const timespec& time ) noexcept
{
    m_time.set_sec_epoch( time.tv_sec );
    m_time.set_nsec( time.tv_nsec );
    m_count = ratio_count< tick_cnt, period >( m_time );
}

// conversion from std::chrono::duration( aka std::chrono::seconds etc )
template< time_type tick_cnt, time_type period >
template< typename std_duration_type >
void time_ratio< tick_cnt, period >::from_std_duration( const std_duration_type& d, const since& start_point ) noexcept
{
    static_assert( type_traits::is_duration< std_duration_type >::value, "Invalid duration type" );

    m_time = dur_to_time_moment( d, start_point );
    m_count = ratio_count< tick_cnt, period >( m_time );
}

template< time_type tick_cnt, time_type period >
auto time_ratio< tick_cnt, period >::now() noexcept -> time_ratio< tick_cnt, period >
{
    return time_ratio< tick_cnt, period >{ dur_to_time_moment( std::chrono::system_clock::now().time_since_epoch(), since::epoch ) };
}

// conversion to time_t
template< time_type tick_cnt, time_type period >
constexpr time_t time_ratio< tick_cnt, period >::to_time_t() const noexcept
{
    return m_time.sec_epoch();
}

// conversion to timeval
template< time_type tick_cnt, time_type period >
constexpr timeval time_ratio< tick_cnt, period >::to_timeval() const noexcept
{
    return { static_cast< long >( m_time.sec_epoch() ),
             static_cast< long >( details::nsec_to_microsec( m_time.nsec() ) ) };
}

// conversion to timespec
template< time_type tick_cnt, time_type period >
constexpr timespec time_ratio< tick_cnt, period >::to_timespec() const noexcept
{
    return { static_cast< long >( m_time.sec_epoch() ),
             static_cast< long >( m_time.nsec() ) };
}

// conversion to std::chrono::duration of type std_duration_type
template< time_type tick_cnt, time_type period >
template< typename std_duration_type >
constexpr std_duration_type time_ratio< tick_cnt, period >::to_std_duration() const noexcept
{
    static_assert( type_traits::is_duration< std_duration_type >::value, "Invalid duration type" );

    using namespace std::chrono;
    return duration_cast< std_duration_type >( seconds{ m_time.jsec() } ) +
           duration_cast< std_duration_type >( nanoseconds{ m_time.nsec() } );
}

template< time_type tick_cnt, time_type period >
constexpr time_type time_ratio< tick_cnt, period >::count() const noexcept
{
    return m_count;
}

template< time_type tick_cnt, time_type period >
constexpr time_type time_ratio< tick_cnt, period >::count_since_epoch() const noexcept
{
    return ratio_count< tick_cnt, period >( m_time, true );
}

// conversion to date_time
template< time_type tick_cnt, time_type period >
constexpr date_time time_ratio< tick_cnt, period >::to_date_time() const noexcept
{
    return date_time{ m_time };
}

template< time_type tick_cnt, time_type period >
const time_ratio< tick_cnt, period > time_ratio< tick_cnt, period >::m_max( std::numeric_limits< time_type >::max() );

template< time_type tick_cnt, time_type period >
constexpr const time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::max() noexcept
{
    return time_ratio< tick_cnt, period >::m_max;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
constexpr bool
time_ratio< tick_cnt, period >::operator==( const time_ratio< other_tick_cnt, other_period >& other ) const noexcept
{
    return other.m_time == m_time;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
constexpr bool
time_ratio< tick_cnt, period >::operator!=( const time_ratio< other_tick_cnt, other_period >& other ) const noexcept
{
    return other.m_time != m_time;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
time_ratio< tick_cnt, period >&
time_ratio< tick_cnt, period >::operator+=( const time_ratio< other_tick_cnt, other_period >& other ) noexcept
{
    m_time += other.m_time;
    return *this;
}

template< time_type tick_cnt, time_type period >
template< time_type other_tick_cnt, time_type other_period >
time_ratio< tick_cnt, period >&
time_ratio< tick_cnt, period >::operator-=( const time_ratio< other_tick_cnt, other_period >& other ) noexcept
{
    m_time -= other.m_time;
    return *this;
}

template< time_type tick_cnt, time_type period >
time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::operator+=( time_type count ) noexcept
{
    m_time += cnt_to_time_moment< tick_cnt, period >( count );
    return *this;
}

template< time_type tick_cnt, time_type period >
time_ratio< tick_cnt, period >& time_ratio< tick_cnt, period >::operator-=( time_type count ) noexcept
{
    m_time -= cnt_to_time_moment< tick_cnt, period >( count );
    return *this;
}

template< time_type ltk, time_type lp, time_type rtk, time_type rp >
constexpr time_ratio< ltk, lp >
operator+( const time_ratio< ltk, lp >& l, const time_ratio< rtk, rp >& r ) noexcept
{
    return time_ratio< ltk, lp >{ l.m_time + r.m_time };
}

template< time_type ltk, time_type lp, time_type rtk, time_type rp >
constexpr time_ratio< ltk, lp >
operator-( const time_ratio< ltk, lp >& l, const time_ratio< rtk, rp >& r ) noexcept
{
    return time_ratio< ltk, lp >{ l.m_time - r.m_time };
}

}// details

}// temporal

}// helpers

#endif
